---
# Title: OTRS-CE community edition
#
# Authtor: bitfinity-nl
# File: defaults/ubt-1804-amd64.yml
#
# Description:
#   OTRS Community Edition Open Source 
#   help Desk Software and free features

- name: "Add AD/LDAP administrative user to OTRS"
  raw: sudo su - otrs -c "/opt/otrs/bin/otrs.Console.pl Admin::User::Add --user-name {{ otrs_ad_account }} --first-name {{ otrs_ad_firstname }} --last-name {{ otrs_ad_lastname }} --email-address {{ otrs_ad_email }} --quiet"
  ignore_errors: yes

- name: "Add agent adm_otrs to group admin/stats/users with rw permissions"
  raw: sudo su - otrs -c "/opt/otrs/bin/otrs.Console.pl Admin::Group::UserLink --user-name {{ otrs_ad_account }} --group-name {{ item }} --permission rw"
  with_items:
    - admin
    - stats
    - users

- name: "Insert/Update LDAP/Active Directory configuration"
  blockinfile:
    path: /opt/otrs/Kernel/Config.pm
    insertafter: "Self->{CheckMXRecord} = .;"
    block: |2
    
          # <!-- Active Directory - Agent-->

          # This is an example configuration for an LDAP auth. backend.
          # (Make sure Net::LDAP is installed!)
          $Self->{'AuthModule'} = 'Kernel::System::Auth::LDAP';
          $Self->{'AuthModule::LDAP::Host'} = '{{ otrs_ad_dc }}';
          $Self->{'AuthModule::LDAP::BaseDN'} = '{{ otrs_ad_basedn }}';
          $Self->{'AuthModule::LDAP::UID'} = 'sAMAccountName';

          # Check if the user is allowed to auth in a posixGroup
          # (e. g. user needs to be in a group xyz to use otrs)
          $Self->{'AuthModule::LDAP::GroupDN'} = '{{ otrs_ad_groupdn }}';
          $Self->{'AuthModule::LDAP::AccessAttr'} = '{{ otrs_ad_accessattr }}';
          # for ldap posixGroups objectclass (just uid)
          #  $Self->{'AuthModule::LDAP::UserAttr'} = 'UID';
          # for non ldap posixGroups objectclass (with full user dn)
          $Self->{'AuthModule::LDAP::UserAttr'} = '{{ otrs_ad_userattr }}';

          # The following is valid but would only be necessary if the
          # anonymous user do NOT have permission to read from the LDAP tree
          $Self->{'AuthModule::LDAP::SearchUserDN'} = '{{ otrs_ad_searchuserdn }}';
          $Self->{'AuthModule::LDAP::SearchUserPw'} = '{{ otrs_ad_searchuserpw }}';

          # in case you want to add always one filter to each ldap query, use
          # this option. e. g. AlwaysFilter => '(mail=*)' or AlwaysFilter => '(objectclass=user)'
          $Self->{'AuthModule::LDAP::AlwaysFilter'} = '';

          # in case you want to add a suffix to each login name, then
          # you can use this option. e. g. user just want to use user but
          # in your ldap directory exists user@domain.com
          #    $Self->{'AuthModule::LDAP::UserSuffix'} = '@domain.com';

          # Net::LDAP new params (if needed - for more info see perldoc Net::LDAP)
          $Self->{'AuthModule::LDAP::Params'} = {
              port => 389,
              timeout => 120,
              async => 0,
              version => 3,
          };

          # Now sync data with OTRS DB
          $Self->{'AuthSyncModule'} = 'Kernel::System::Auth::Sync::LDAP';
          $Self->{'AuthSyncModule::LDAP::Host'} = '{{ otrs_ad_dc }}';
          $Self->{'AuthSyncModule::LDAP::BaseDN'} = '{{ otrs_ad_basedn }}';
          $Self->{'AuthSyncModule::LDAP::UID'} = '{{ otrs_ad_uid }}';
          $Self->{'AuthSyncModule::LDAP::SearchUserDN'} = '{{ otrs_ad_searchuserdn }}';
          $Self->{'AuthSyncModule::LDAP::SearchUserPw'} = '{{ otrs_ad_searchuserpw }}';

          $Self->{'AuthSyncModule::LDAP::UserSyncMap'} = {
              # DB -> LDAP
              UserFirstname => 'givenName',
              UserLastname  => 'sn',
              UserEmail     => 'mail',
          };

          # AuthSyncModule::LDAP::UserSyncInitialGroups
          # (sync following group with rw permission after initial create of first agent
          # login)
          $Self->{'AuthSyncModule::LDAP::UserSyncInitialGroups'} = [
              'users',
          ];
          # <!-- Active Directory - Agent-->

          # <!-- Active Directory - Customer-->

          # CustomerUser
          # (customer user ldap backend and settings)
          $Self->{CustomerUser} = {
              Name => 'LDAP Data Source',
              Module => 'Kernel::System::CustomerUser::LDAP',
              Params => {
                  # ldap host
                  Host => '{{ otrs_ad_dc }}',
                  # ldap base dn
                  BaseDN => '{{ otrs_ad_basedn }}',
                  # search scope (one|sub)
                  SSCOPE => 'sub',
                  # The following is valid but would only be necessary if the
                  # anonymous user does NOT have permission to read from the LDAP tree
                  UserDN => '{{ otrs_ad_searchuserdn }}',
                  UserPw => '{{ otrs_ad_searchuserpw }}',
                  # in case you want to add always one filter to each ldap query, use
                  # this option. e. g. AlwaysFilter => '(mail=*)' or AlwaysFilter => '(objectclass=user)'
      #            AlwaysFilter => '',
                  # if your frontend is e. g. iso-8859-1 and the charset of your
                  # ldap server is utf-8, use these options.
      #            SourceCharset => 'utf-8',
      #            DestCharset => 'iso-8859-1',
                  # if both your frontend and your LDAP are unicode, use this:
                  SourceCharset => 'utf-8',
                  DestCharset   => 'utf-8',

                  # Net::LDAP new params (if needed - for more info see perldoc Net::LDAP)
                  Params => {
      #                port => 389,
                      port => 3268,
                      timeout => 120,
                      async => 0,
                      version => 3,
                  },
              },
                  ReadOnly => 1,
                      # customer unique id
              CustomerKey => 'sAMAccountName',
              # customer #
              CustomerID => 'mail',
              CustomerUserListFields => ['cn', 'mail'],
              CustomerUserSearchFields => ['cn', 'givenname', 'mail'],
              CustomerUserSearchPrefix => '',
              CustomerUserSearchSuffix => '*',
              CustomerUserSearchListLimit => 250,
              CustomerUserPostMasterSearchFields => ['mail'],
              CustomerUserNameFields => ['givenname', 'sn'],
              # show not own tickets in customer panel, CompanyTickets
              CustomerUserExcludePrimaryCustomerID => 0,
              # add an ldap filter for valid users (expert setting)
      #       CustomerUserValidFilter => '(!(description=locked))',
              # administrator can't change customer preferences
              AdminSetPreferences => 0,
              # cache time to live in sec. - cache any database queries
              CacheTTL => 120,
              Map => [
                  # note: Login, Email and CustomerID are mandatory!
                  # if you need additional attributes from AD, just map them here.
                  # var, frontend, storage, shown (1=always,2=lite), required, storage-type, http-link, readonly
                  [ 'UserFirstname',  'Firstname',   'givenname',       1, 1, 'var', '', 0 ],
                  [ 'UserLastname',   'Lastname',    'sn',              1, 1, 'var', '', 0 ],
                  [ 'UserLogin',      'Username',    'sAMAccountName',             1, 1, 'var', '', 0 ],
                  [ 'UserEmail',      'Email',       'mail',            1, 1, 'var', '', 0 ],
                  [ 'UserCustomerID', 'CustomerID',  'department',            0, 1, 'var', '', 0 ],
                  [ 'UserPhone',      'Phone',      'telephoneNumber', 1, 0, 'var', '', 0 ],
                  [ 'UserMobile',     'Mobile',      'mobile', 1, 0, 'var', '', 0 ],
                  [ 'UserRoom',       'Room',        'physicalDeliveryOfficeName', 1, 0, 'var', '', 0 ],
                  [ 'Department',     'Department',        'department', 1, 0, 'var', '', 0 ],
              ],
          };

          # <!-- Active Directory - Customer-->

          # <!-- Local Database - Customer -->

          # CustomerUser (customer database backend and settings)
          $Self->{CustomerUser1} = {
              Name => 'Database Datasource',
              Module => 'Kernel::System::CustomerUser::DB',
              Params => {
                  # if you want to use an external database, add the required settings
          #            DSN => 'DBI:odbc:yourdsn',
          #            Type => 'mssql', # only for ODBC connections
          #            DSN => 'DBI:mysql:database=customerdb;host=customerdbhost',
          #            User => '',
          #            Password => '',
                      Table => 'customer_user',

                      # CaseSensitive will control if the SQL statements need LOWER()
                      #   function calls to work case insensitively. Setting this to
                      #   1 will improve performance dramatically on large databases.
                      CaseSensitive => 0,
                  },
          # customer unique id
          CustomerKey => 'login',

          # customer #
          CustomerID => 'customer_id',
          CustomerValid => 'valid_id',
              CustomerUserListFields => ['first_name', 'last_name', 'email'],
              CustomerUserSearchFields => ['login', 'last_name', 'customer_id'],
              CustomerUserSearchPrefix => '',
              CustomerUserSearchSuffix => '*',
              CustomerUserSearchListLimit => 250,
              CustomerUserPostMasterSearchFields => ['email'],
              CustomerUserNameFields => ['title','first_name','last_name'],
              CustomerUserEmailUniqCheck => 1,
          #    # show not own tickets in customer panel, CompanyTickets
          #    CustomerUserExcludePrimaryCustomerID => 0,
          #    # generate auto logins
          #    AutoLoginCreation => 0,
          #    AutoLoginCreationPrefix => 'auto',
          #    # admin can change customer preferences
          #    AdminSetPreferences => 1,
          #    # cache time to live in sec. - cache any database queries
          #    CacheTTL => 0,
          #    # just a read only source
          #    ReadOnly => 1,
              Map => [
                  # note: Login, Email and CustomerID needed!
                  # var, frontend, storage, shown (1=always,2=lite), required, storage-type, http-link, readonly, http-link-target, link class(es)
                  [ 'UserTitle',      'Title',      'title',      1, 0, 'var', '', 0 ],
                  [ 'UserFirstname',  'Firstname',  'first_name', 1, 1, 'var', '', 0 ],
                  [ 'UserLastname',   'Lastname',   'last_name',  1, 1, 'var', '', 0 ],
                  [ 'UserLogin',      'Username',   'login',      1, 1, 'var', '', 0 ],
                  [ 'UserPassword',   'Password',   'pw',         0, 0, 'var', '', 0 ],
                  [ 'UserEmail',      'Email',      'email',      1, 1, 'var', '', 0 ],
          #        [ 'UserEmail',      Translatable('Email'), 'email',           1, 1, 'var', '[% Env("CGIHandle") %]?Action=AgentTicketCompose;ResponseID=1;TicketID=[% Data.TicketID | uri %];ArticleID=[% Data.ArticleID | uri %]', 0, '', 'AsPopup OTRSPopup_TicketAction' ],
                  [ 'UserCustomerID', 'CustomerID', 'customer_id', 0, 1, 'var', '', 0 ],
          #        [ 'UserCustomerIDs', 'CustomerIDs', 'customer_ids', 1, 0, 'var', '', 0 ],
                  [ 'UserPhone',        'Phone',       'phone',        1, 0, 'var', '', 0 ],
                  [ 'UserFax',          'Fax',         'fax',          1, 0, 'var', '', 0 ],
                  [ 'UserMobile',       'Mobile',      'mobile',       1, 0, 'var', '', 0 ],
                  [ 'UserStreet',       'Street',      'street',       1, 0, 'var', '', 0 ],
                  [ 'UserZip',          'Zip',         'zip',          1, 0, 'var', '', 0 ],
                  [ 'UserCity',         'City',        'city',         1, 0, 'var', '', 0 ],
                  [ 'UserCountry',      'Country',     'country',      1, 0, 'var', '', 0 ],
                  [ 'UserComment',      'Comment',     'comments',     1, 0, 'var', '', 0 ],
                  [ 'ValidID',          'Valid',       'valid_id',     0, 1, 'int', '', 0 ],

                  # Dynamic field example
          #        [ 'DynamicField_Name_X', undef, 'Name_X', 0, 0, 'dynamic_field', undef, 0, undef, undef, ],
              ],
              # default selections
              Selections => {
                  UserTitle => {
                      'Mr.' => 'Mr.',
                      'Mrs.' => 'Mrs.',
                  },
              },
          };

         # <!-- Active Directory - Customer-->
